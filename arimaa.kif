;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Arimaa3-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Components
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (role gold)
  (role silver)

; All possible actions
  (<= (input ?r (place ?m ?n)) (role ?r) (row ?m) (col ?n))
    
  (<= (input ?r noop) (role ?r))
  (<= (input ?r stop) (role ?r))

  ; TODO: add step counter to each state, figure out how to capture pushing
  ; TODO: define action for moving pieces (i.e. after the first move)

  (<= (base (stepCount ?count) ) (step ?count)  )

  (<= (base (cell ?m ?n ?g)) (row ?m) (col ?n) (gPiece ?g))
  (<= (base (cell ?m ?n ?s)) (row ?m) (col ?n) (sPiece ?s))
  (<= (base (cell ?m ?n b)) (row ?m) (col ?n))
  
  (<= (base (control gold))
  (<= (base (control silver))  

  (step 17) ; beyond first move
  (step 16) ; true
  (step 15) ; true
  (step 14) ; true
  (step 13) ; true
  (step 12) ; true
  (step 11) ; true
  (step 10) ; true
  (step 9) ; true
  (step 8) ; true
  (step 7) ; true
  (step 6) ; true
  (step 5) ; true
  (step 4) ; true
  (step 3) ; true
  (step 2) ; true
  (step 1) ; true

  (row 1)
  (row 2)
  (row 3)
  (row 4)
  (row 5)
  (row 6)
  (row 7)
  (row 8)

  (col 1)
  (col 2)
  (col 3)
  (col 4)
  (col 5)
  (col 6)
  (col 7)
  (col 8)

  (direction north)
  (direction south)
  (direction east)
  (direction west)

  (gPiece R)
  (gPiece D)
  (gPiece C)
  (gPiece H)
  (gPiece M)
  (gPiece E)
  
  (sPiece r)
  (sPiece d)
  (sPiece c)
  (sPiece h)
  (sPiece m)
  (sPiece e)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
  (init (cell 1 1 b) ) 
  (init (cell 1 2 b) ) 
  (init (cell 1 3 b) ) 
  (init (cell 1 4 b) ) 
  (init (cell 1 5 b) ) 
  (init (cell 1 6 b) ) 
  (init (cell 1 7 b) ) 
  (init (cell 1 8 b) ) 
  (init (cell 2 1 b) ) 
  (init (cell 2 2 b) ) 
  (init (cell 2 3 b) ) 
  (init (cell 2 4 b) ) 
  (init (cell 2 5 b) ) 
  (init (cell 2 6 b) ) 
  (init (cell 2 7 b) ) 
  (init (cell 2 8 b) ) 
  (init (cell 3 1 b) ) 
  (init (cell 3 2 b) ) 
  (init (cell 3 3 b) ) 
  (init (cell 3 4 b) ) 
  (init (cell 3 5 b) ) 
  (init (cell 3 6 b) ) 
  (init (cell 3 7 b) ) 
  (init (cell 3 8 b) ) 
  (init (cell 4 1 b) ) 
  (init (cell 4 2 b) ) 
  (init (cell 4 3 b) ) 
  (init (cell 4 4 b) ) 
  (init (cell 4 5 b) ) 
  (init (cell 4 6 b) ) 
  (init (cell 4 7 b) ) 
  (init (cell 4 8 b) ) 
  (init (cell 5 1 b) ) 
  (init (cell 5 2 b) ) 
  (init (cell 5 3 b) ) 
  (init (cell 5 4 b) ) 
  (init (cell 5 5 b) ) 
  (init (cell 5 6 b) ) 
  (init (cell 5 7 b) ) 
  (init (cell 5 8 b) ) 
  (init (cell 6 1 b) ) 
  (init (cell 6 2 b) ) 
  (init (cell 6 3 b) ) 
  (init (cell 6 4 b) ) 
  (init (cell 6 5 b) ) 
  (init (cell 6 6 b) ) 
  (init (cell 6 7 b) ) 
  (init (cell 6 8 b) ) 
  (init (cell 7 1 b) ) 
  (init (cell 7 2 b) ) 
  (init (cell 7 3 b) ) 
  (init (cell 7 4 b) ) 
  (init (cell 7 5 b) ) 
  (init (cell 7 6 b) ) 
  (init (cell 7 7 b) ) 
  (init (cell 7 8 b) ) 
  (init (cell 8 1 b) ) 
  (init (cell 8 2 b) ) 
  (init (cell 8 3 b) ) 
  (init (cell 8 4 b) ) 
  (init (cell 8 5 b) ) 
  (init (cell 8 6 b) ) 
  (init (cell 8 7 b) ) 
  (init (cell 8 8 b) )
 
  (init (control gold))
  (init (step 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; legal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; PLACEMENT

  (<= (legal ?R (place ?M ?N))
      (control ?R)
      (true (cell ?M ?N b))
  )
  
  (<= (legal white noop) (control black) )
  (<= (legal black noop) (control white) )

;;; MOVE


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; next
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; goal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; terminal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MOVE COUNT SUCCESSOR
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
