
; knightstour.kif

; One player in the game
(role player)

; define all possible actions 'hop'
(<= (input ?R (hop ?M ?N))
    (row ?M) 
    (col ?N)
    (role ?R)
)

; Board has 5 rows and 6 columns
(row 1)
(row 2)
(row 3)
(row 4)
(row 5)

(col a)
(col b)
(col c)
(col d)
(col e)
(col f)
   
; 1-> true 0->false
(boolean 1)
(boolean 0)

; Cells can be a hole, a blank cell, or an occupied cell
(<= (base (cell ?M ?N hole)) (row ?M) (col ?N))
(<= (base (cell ?M ?N blank)) (row ?M) (col ?N))
(<= (base (cell ?M ?N occupied)) (row ?M) (col ?N))
(<= (base (isFirstMove ?bool)) (boolean ?bool))

(init (isFirstMove 1))
(init (cell 1 a blank))
(init (cell 1 b blank))
(init (cell 1 c blank))
(init (cell 1 d blank))
(init (cell 1 e blank))
(init (cell 1 f blank))
(init (cell 2 a blank))
(init (cell 2 b blank))
(init (cell 2 c blank))
(init (cell 2 d blank))
(init (cell 2 e blank))
(init (cell 2 f blank))
(init (cell 3 a blank))
(init (cell 3 b blank))
(init (cell 3 c blank))
(init (cell 3 d blank))
(init (cell 3 e blank))
(init (cell 3 f blank))
(init (cell 4 a blank))
(init (cell 4 b blank))
(init (cell 4 c blank))
(init (cell 4 d blank))
(init (cell 4 e blank))
(init (cell 4 f blank))
(init (cell 5 a blank))
(init (cell 5 b blank))
(init (cell 5 c blank))
(init (cell 5 d blank))
(init (cell 5 e blank))
(init (cell 5 f blank))


(next_row 1 2)
(next_row 2 3)
(next_row 3 4)
(next_row 4 5)
(next_col a b)
(next_col b c)
(next_col c d)
(next_col d e)
(next_col e f)

; loc1 and loc2 are rows or columns [1-5|a-f]
(<= (adjacent ?loc1 ?loc2) (next_row ?loc1 ?loc2))
(<= (adjacent ?loc1 ?loc2) (next_row ?loc2 ?loc1))
(<= (adjacent ?loc1 ?loc2) (next_col ?loc1 ?loc2))
(<= (adjacent ?loc1 ?loc2) (next_col ?loc2 ?loc1))

(<= (adjacent_two ?loc1 ?loc2)
    (adjacent ?loc1 ?mid)
    (adjacent ?mid ?loc2)
    (distinct ?loc1 ?loc2)
)

; on the first move, hop (place the knight) anywhere
(<= (legal ?R (hop ?M ?N))
    (role ?R)
    (cell ?M ?N blank)
    (true (isFirstMove 1))
)

; on all other moves, hop only to valid squares
(<= (legal ?R (hop ?M ?N))
    (legal_move ?M ?N)
    (role ?R)
)

(<= (legal_move ?M ?N)
    (true (cell ?M ?N blank))     ; destination is blank
    (true (cell ?J ?K occupied))  ; the source is occupied...
    (knights_move ?J ?M ?K ?N)    ; ...and the knight can move from the occupied square to the destination
)



; the characteristic L-shape of the knight movement
(<= (knights_move ?r1 ?r2 ?c1 ?c2)
    (adjacent ?r1 ?r2)
    (adjacent_two ?c1 ?c2)
)

(<= (knights_move ?r1 ?r2 ?c1 ?c2)
    (adjacent_two ?r1 ?r2)
    (adjacent ?c1 ?c2)
)
    

; handles first move
(<= (next (isFirstMove 0)) 
    (true (isFirstMove 1))
)

; occupies destination cell
(<= (next (cell ?M ?N occupied)) 
    (does ?R (hop ?M ?N))
)

; dig out (make a hole of) source cell
(<= (next (cell ?J ?K hole))
    (true (cell ?J ?K occupied))
)

; untouched blank and hole cells stay the same
(<= (next (cell ?M ?N ?W))
    (true (cell ?M ?N ?W))
    (distinct ?W occupied)
    (does player (hop ?J ?K))
    (distinct ?M ?J)
    (distinct ?N ?K)
)



; If no cells are blank, then the player has won (i.e. visited all cells)
; Question: does this line need parentheses around 'all_occupied'?
(<= all_visited 
    (not (true (cell ?M ?N blank)))
)

; No legal moves remaining (knight is stuck, but have not won)
(<= stalemate
    (not (legal_move ?M ?N))
    (not all_visited)
)
        

(<= (goal player 100) all_visited)
(<= (goal player 0) stalemate)

(<= terminal all_visited)
(<= terminal stalemate)
